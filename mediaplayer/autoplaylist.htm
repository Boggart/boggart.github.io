<head>
	<code>
		<script src="jquery.js"></script>
		<script src="mediaelement-and-player.min.js"></script>
		<link rel="stylesheet" href="mediaelementplayer.min.css" />
        <!-- MediaElement Playlist Plugin -->
        <script type="text/javascript" src="mediaelement-playlist-plugin.min.js"></script>
        <link type="text/css" rel="stylesheet" href="mediaelement-playlist-plugin.min.css" />
	</code>
</head>

<body>
	<audio 
        id="player"	
        class="mep-playlist"
        data-showplaylist="true"
        width="400"
        height="220"
        controls="controls"
        preload="auto"
        >
        <source id="placeholder" type="audio/mpeg" src="blank.mp3" />
    </audio>
	<script>
        function initplayer() {
        	player.pause();
            var elem = document.getElementById('player');
            for (var i = 0; i < elem.children.length; i++) {
                elem.removeChild(elem.children[i]);
            }
            var url = window.location.hash.slice(1);
            var base64Matcher = new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})([=]{1,2})?$");
            if (base64Matcher.test(url)) {
                console.log("Autoplayer: Playlist mode");
                var playlistdata = b64_to_utf8(url);
                playlistdata = playlistdata.split(",");
                var arrayLength = playlistdata.length;
                for (var i = 0; i < arrayLength; i++) {
                    
                    var source= document.createElement('source');
                    url = playlistdata[i];
                    var p = /^(?:https?:\/\/)?(?:www\.)?    (?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
                    if(url.match(p)) {
                        source.type = "audio/youtube";
                        console.log("Audio type of " + url + " is: " + source.type)
                    }
                    else {
                        //p = new RegExp('((?:[a-z][a-z\\.\\d_]+)\\.(?:[a-z\\d]{3}))(?![\\w\\.])',["i"]);
                        var filename = url.substring(url.lastIndexOf('/')+1);
                        console.log(filename);
                        console.log(url);
                        //filename = p.exec(filename);
                        //console.log(filename);
                        var ext = (filename.split(".")).pop();
                        console.log("extension: " + ext);
                        if(ext == "mp3") {
                            source.type = "audio/mpeg";
                            console.log("Audio type of " + filename + " is: " + source.type)
                        }
                        if(ext == "ogg") {
                            source.type= "audio/ogg";
                            console.log("Audio type of " + filename + " is: " + source.type)
                        }
                    }
                    source.src = url;
                    console.log("source.src: " + source.src)
                    audioelem = document.getElementById('player');
                    audioelem.appendChild(source);
                }
                player = new MediaElementPlayer('#player', {
                    enablePluginDebug: true,
                    plugins: ['flash','silverlight'],
                    "features": ['playlistfeature', 'prevtrack', 'playpause', 'nexttrack', 'loop', 'shuffle', 'current', 'progress', 'duration', 'volume', 'playlist'],
                    "audioVolume": "horizontal",
                    "shuffle": false,
                    "loop": false
                });
                player.play();
            } else {
                console.log("Autoplayer: Single file mode");
                var source= document.createElement('source');
                var p = /^(?:https?:\/\/)?(?:www\.)?    (?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
                if(url.match(p)) {
                    source.type= 'audio/youtube';
                    console.log("Audio type of " + url + " is: " + source.type)
                }
                else {
                    //p = new RegExp('((?:[a-z][a-z\\.\\d_]+)\\.(?:[a-z\\d]{3}))(?![\\w\\.])',["i"]);
                    var filename = url.substring(url.lastIndexOf('/')+1);
                    console.log(filename);
                    console.log(url);
                    //filename = p.exec(filename);
                    var ext = filename.split(".").pop();
                    if(ext == "mp3") {
                        source.type= "audio/mpeg";
                        console.log("Audio type of " + filename + " is: " + source.type)
                    }
                    if(ext == "ogg") {
                        source.type= "audio/ogg";
                        console.log("Audio type of " + filename + " is: " + source.type)
                    }
                }
                source.src = url;
                audioelem = document.getElementById('player');
                audioelem.appendChild(source);
                    
                player = new MediaElementPlayer('#player', {
                    enablePluginDebug: true,
                    plugins: ['flash','silverlight']
                });


                player.play();
            }
             player.play();
        }
    
        function playlistit()
        {
            var nameElement = document.getElementById("playlisturls");
            var theurls = nameElement.value;
            var playlistdata = utf8_to_b64(theurls)
            window.location.hash = '#' + playlistdata;
            document.location.reload(true)
        }
    
        function utf8_to_b64( str ) {
            return window.btoa(unescape(encodeURIComponent( str )));
        }

        function b64_to_utf8( str ) {
        return decodeURIComponent(escape(window.atob( str )));
        }
        
        initplayer()
		window.onhashchange = initplayer()

	</script>
    
	<p><input id="playlisturls" type="text" size=200> <input type="button" value="Make Playlist" onClick="playlistit()">
    <br>Make a playlist by putting urls separted by commas in the above box. (No spaces between the urls.)
    <br>Autoplay may not work with some browsers, seeking and duration will not work until the file completely loads with some webservers.
	<br>Powered by <a href="http://mediaelementjs.com">MediaElement</a>.</p>
</body>


